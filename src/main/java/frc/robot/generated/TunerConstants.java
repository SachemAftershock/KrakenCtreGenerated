package frc.robot.generated;

import static edu.wpi.first.units.Units.*;

import com.ctre.phoenix6.CANBus;
import com.ctre.phoenix6.configs.*;
import com.ctre.phoenix6.hardware.*;
import com.ctre.phoenix6.signals.*;
import com.ctre.phoenix6.swerve.*;
import com.ctre.phoenix6.swerve.SwerveModuleConstants.*;

import edu.wpi.first.math.Matrix;
import edu.wpi.first.math.numbers.N1;
import edu.wpi.first.math.numbers.N3;
import edu.wpi.first.units.measure.*;

import frc.robot.subsystems.CommandSwerveDrivetrain;

// Generated by the Tuner X Swerve Project Generator
// https://v6.docs.ctr-electronics.com/en/stable/docs/tuner/tuner-swerve/index.html
public class TunerConstants {
    // Both sets of gains need to be tuned to your individual robot.

    // --- Slot convention ---
    // Slot 0 -> Steer gains (azimuth)
    // Slot 1 -> Drive Translation gains
    // Slot 2 -> Drive Rotation gains (PLACEHOLDERS)

    // --- Drive Translation gains per module (FL, FR, BL, BR) from your provided table ---
    private static final Slot0Configs[] driveTranslationGains = new Slot0Configs[] {
        // Front Left drive (Motor ID 9)
        new Slot0Configs()
            .withKS(0.13445).withKV(0.1255).withKA(0.014277)
            .withKP(0.18962).withKI(0.0).withKD(0.0),

        // Front Right drive (Motor ID 3)
        new Slot0Configs()
            .withKS(0.16762).withKV(0.11892).withKA(0.011316)
            .withKP(0.16699).withKI(0.0).withKD(0.0),

        // Back Left drive (Motor ID 10)
        new Slot0Configs()
            .withKS(0.14647).withKV(0.12332).withKA(0.014258)
            .withKP(0.18196).withKI(0.0).withKD(0.0),

        // Back Right drive (Motor ID 1)
        new Slot0Configs()
            .withKS(0.18798).withKV(0.12071).withKA(0.012633)
            .withKP(0.17457).withKI(0.0).withKD(0.0)
    };

    // --- Drive Rotation gains per module (PLACEHOLDERS). Replace with your rotate-mode numbers when available ---
    private static final Slot0Configs[] driveRotationGains = new Slot0Configs[] {
        // Front Left rotate (placeholder)
        new Slot0Configs()
            .withKS(0.0).withKV(0.0).withKA(0.0)
            .withKP(0.0).withKI(0.0).withKD(0.0),

        // Front Right rotate (placeholder)
        new Slot0Configs()
            .withKS(0.0).withKV(0.0).withKA(0.0)
            .withKP(0.0).withKI(0.0).withKD(0.0),

        // Back Left rotate (placeholder)
        new Slot0Configs()
            .withKS(0.0).withKV(0.0).withKA(0.0)
            .withKP(0.0).withKI(0.0).withKD(0.0),

        // Back Right rotate (placeholder)
        new Slot0Configs()
            .withKS(0.0).withKV(0.0).withKA(0.0)
            .withKP(0.0).withKI(0.0).withKD(0.0)
    };

    // Steer Gains for Steer Motors
    private static final Slot0Configs Slot0Configs_FrontLeftSteer = new Slot0Configs()
        .withKS(0.18372).withKV(2.3007).withKA(0.099203)
        .withKP(44.76).withKI(0.0).withKD(2.5436)
        .withStaticFeedforwardSign(StaticFeedforwardSignValue.UseClosedLoopSign);

    private static final Slot0Configs Slot0Configs_FrontRightSteer = new Slot0Configs()
        .withKS(0.075647).withKV(2.2808).withKA(0.10837)
        .withKP(48.63).withKI(0.0).withKD(3.0887)
        .withStaticFeedforwardSign(StaticFeedforwardSignValue.UseClosedLoopSign);

    private static final Slot0Configs Slot0Configs_BackLeftSteer = new Slot0Configs()
        .withKS(0.13114).withKV(2.2923).withKA(0.084971)
        .withKP(40.95).withKI(0.0).withKD(2.2742)
        .withStaticFeedforwardSign(StaticFeedforwardSignValue.UseClosedLoopSign);

    private static final Slot0Configs Slot0Configs_BackRighttSteer = new Slot0Configs()
        .withKS(0.1832).withKV(2.3025).withKA(0.07945)
        .withKP(40.246).withKI(0.0).withKD(2.1705)
        .withStaticFeedforwardSign(StaticFeedforwardSignValue.UseClosedLoopSign);

    // Translation Gains for Drive Motors
    private static final Slot1Configs Slot1Configs_FrontLeftTranslation = new Slot1Configs()
        .withKS(0.18372).withKV(2.3007).withKA(0.099203)
        .withKP(44.76).withKI(0.0).withKD(2.5436)
        .withStaticFeedforwardSign(StaticFeedforwardSignValue.UseClosedLoopSign);

    private static final Slot1Configs Slot1Configs_FrontRightTranslation = new Slot1Configs()
        .withKS(0.075647).withKV(2.2808).withKA(0.10837)
        .withKP(48.63).withKI(0.0).withKD(3.0887)
        .withStaticFeedforwardSign(StaticFeedforwardSignValue.UseClosedLoopSign);

    private static final Slot1Configs Slot1Configs_BackLeftTranslation = new Slot1Configs()
        .withKS(0.13114).withKV(2.2923).withKA(0.084971)
        .withKP(40.95).withKI(0.0).withKD(2.2742)
        .withStaticFeedforwardSign(StaticFeedforwardSignValue.UseClosedLoopSign);

    private static final Slot1Configs Slot1Configs_BackRighttTranslation = new Slot1Configs()
        .withKS(0.1832).withKV(2.3025).withKA(0.07945)
        .withKP(40.246).withKI(0.0).withKD(2.1705)
        .withStaticFeedforwardSign(StaticFeedforwardSignValue.UseClosedLoopSign);

    // Rotation Gains for Drive Motors
    private static final Slot2Configs Slot2Configs_FrontLeftRotation = new Slot2Configs()
        .withKS(0.18372).withKV(2.3007).withKA(0.099203)
        .withKP(44.76).withKI(0.0).withKD(2.5436)
        .withStaticFeedforwardSign(StaticFeedforwardSignValue.UseClosedLoopSign);

    private static final Slot2Configs Slot2Configs_FrontRightRotation = new Slot2Configs()
        .withKS(0.075647).withKV(2.2808).withKA(0.10837)
        .withKP(48.63).withKI(0.0).withKD(3.0887)
        .withStaticFeedforwardSign(StaticFeedforwardSignValue.UseClosedLoopSign);

    private static final Slot2Configs Slot2Configs_BackLeftRotation = new Slot2Configs()
        .withKS(0.13114).withKV(2.2923).withKA(0.084971)
        .withKP(40.95).withKI(0.0).withKD(2.2742)
        .withStaticFeedforwardSign(StaticFeedforwardSignValue.UseClosedLoopSign);

    private static final Slot2Configs Slot2Configs_BackRighttRotation = new Slot2Configs()
        .withKS(0.1832).withKV(2.3025).withKA(0.07945)
        .withKP(40.246).withKI(0.0).withKD(2.1705)
        .withStaticFeedforwardSign(StaticFeedforwardSignValue.UseClosedLoopSign);


    // --- Factory creator (unchanged except we still supply generic defaults) ---
    private static final Slot0Configs steerGains = Slot0Configs_FrontLeftSteer; // placeholder used by factory where single object required
    private static final Slot0Configs driveGains = driveTranslationGains[1]; // default/placeholder.  Factory designed to only use Slot 0. We are trying to do better, use all 3 slots.

    // The closed-loop output type to use for the steer motors;
    // This affects the PID/FF gains for the steer motors
    private static final ClosedLoopOutputType kSteerClosedLoopOutput = ClosedLoopOutputType.TorqueCurrentFOC;
    // The closed-loop output type to use for the drive motors;
    // This affects the PID/FF gains for the drive motors
    private static final ClosedLoopOutputType kDriveClosedLoopOutput = ClosedLoopOutputType.TorqueCurrentFOC;

    // The type of motor used for the drive motor
    private static final DriveMotorArrangement kDriveMotorType = DriveMotorArrangement.TalonFX_Integrated;
    // The type of motor used for the drive motor
    private static final SteerMotorArrangement kSteerMotorType = SteerMotorArrangement.TalonFX_Integrated;

    // The remote sensor feedback type to use for the steer motors;
    // When not Pro-licensed, Fused*/Sync* automatically fall back to Remote*
    private static final SteerFeedbackType kSteerFeedbackType = SteerFeedbackType.FusedCANcoder;

    // The stator current at which the wheels start to slip;
    // This needs to be tuned to your individual robot
    private static final Current kSlipCurrent = Amps.of(120.0);

    // Initial configs for the drive and steer motors and the azimuth encoder; these cannot be null.
    // Some configs will be overwritten; check the `with*InitialConfigs()` API documentation.
    private static final TalonFXConfiguration driveInitialConfigs = new TalonFXConfiguration();
    private static final TalonFXConfiguration steerInitialConfigs = new TalonFXConfiguration()
        .withCurrentLimits(
            new CurrentLimitsConfigs()
                // Swerve azimuth does not require much torque output, so we can set a relatively low
                // stator current limit to help avoid brownouts without impacting performance.
                .withStatorCurrentLimit(Amps.of(60))
                .withStatorCurrentLimitEnable(true)
        );
    private static final CANcoderConfiguration encoderInitialConfigs = new CANcoderConfiguration();
    // Configs for the Pigeon 2; leave this null to skip applying Pigeon 2 configs
    private static final Pigeon2Configuration pigeonConfigs = null;

    // CAN bus that the devices are located on;
    // All swerve devices must share the same CAN bus
    public static final CANBus kCANBus = new CANBus("Canivore", "./logs/example.hoot");

    // Theoretical free speed (m/s) at 12 V applied output;
    // This needs to be tuned to your individual robot
    public static final LinearVelocity kSpeedAt12Volts = MetersPerSecond.of(5.96);

    // Every 1 rotation of the azimuth results in kCoupleRatio drive motor turns;
    // This may need to be tuned to your individual robot
    private static final double kCoupleRatio = 3.125;

    private static final double kDriveGearRatio = 5.357142857142857;
    private static final double kSteerGearRatio = 18.75;
    private static final Distance kWheelRadius = Inches.of(2);

    private static final boolean kInvertLeftSide = false;
    private static final boolean kInvertRightSide = true;

    private static final int kPigeonId = 13;

    // These are only used for simulation
    private static final MomentOfInertia kSteerInertia = KilogramSquareMeters.of(0.01);
    private static final MomentOfInertia kDriveInertia = KilogramSquareMeters.of(0.01);
    // Simulated voltage necessary to overcome friction
    private static final Voltage kSteerFrictionVoltage = Volts.of(0.2);
    private static final Voltage kDriveFrictionVoltage = Volts.of(0.2);

    public static final SwerveDrivetrainConstants DrivetrainConstants = new SwerveDrivetrainConstants()
            .withCANBusName(kCANBus.getName())
            .withPigeon2Id(kPigeonId)
            .withPigeon2Configs(pigeonConfigs);

    private static final SwerveModuleConstantsFactory<TalonFXConfiguration, TalonFXConfiguration, CANcoderConfiguration> ConstantCreator =
        new SwerveModuleConstantsFactory<TalonFXConfiguration, TalonFXConfiguration, CANcoderConfiguration>()
            .withDriveMotorGearRatio(kDriveGearRatio)
            .withSteerMotorGearRatio(kSteerGearRatio)
            .withCouplingGearRatio(kCoupleRatio)
            .withWheelRadius(kWheelRadius)
            .withSteerMotorGains(steerGains) // factory still needs a single steerGains object; actual per-module slots are loaded below
            .withDriveMotorGains(driveGains) // factory still needs a single driveGains object; actual per-module slots are loaded below
            .withSteerMotorClosedLoopOutput(kSteerClosedLoopOutput)
            .withDriveMotorClosedLoopOutput(kDriveClosedLoopOutput)
            .withSlipCurrent(kSlipCurrent)
            .withSpeedAt12Volts(kSpeedAt12Volts)
            .withDriveMotorType(kDriveMotorType)
            .withSteerMotorType(kSteerMotorType)
            .withFeedbackSource(kSteerFeedbackType)
            .withDriveMotorInitialConfigs(driveInitialConfigs)
            .withSteerMotorInitialConfigs(steerInitialConfigs)
            .withEncoderInitialConfigs(encoderInitialConfigs)
            .withSteerInertia(kSteerInertia)
            .withDriveInertia(kDriveInertia)
            .withSteerFrictionVoltage(kSteerFrictionVoltage)
            .withDriveFrictionVoltage(kDriveFrictionVoltage);


    // Front Left
    private static final int kFrontLeftDriveMotorId = 9;
    private static final int kFrontLeftSteerMotorId = 4;
    private static final int kFrontLeftEncoderId = 8;
    private static final Angle kFrontLeftEncoderOffset = Rotations.of(0.109375);
    private static final boolean kFrontLeftSteerMotorInverted = true;
    private static final boolean kFrontLeftEncoderInverted = false;

    private static final Distance kFrontLeftXPos = Inches.of(11.875);
    private static final Distance kFrontLeftYPos = Inches.of(11.875);

    // Front Right
    private static final int kFrontRightDriveMotorId = 3;
    private static final int kFrontRightSteerMotorId = 11;
    private static final int kFrontRightEncoderId = 7;
    private static final Angle kFrontRightEncoderOffset = Rotations.of(0.328125);
    private static final boolean kFrontRightSteerMotorInverted = true;
    private static final boolean kFrontRightEncoderInverted = false;

    private static final Distance kFrontRightXPos = Inches.of(11.875);
    private static final Distance kFrontRightYPos = Inches.of(-11.875);

    // Back Left
    private static final int kBackLeftDriveMotorId = 10;
    private static final int kBackLeftSteerMotorId = 2;
    private static final int kBackLeftEncoderId = 6;
    private static final Angle kBackLeftEncoderOffset = Rotations.of(0.0654296875);
    private static final boolean kBackLeftSteerMotorInverted = true;
    private static final boolean kBackLeftEncoderInverted = false;

    private static final Distance kBackLeftXPos = Inches.of(-11.875);
    private static final Distance kBackLeftYPos = Inches.of(11.875);

    // Back Right
    private static final int kBackRightDriveMotorId = 1;
    private static final int kBackRightSteerMotorId = 12;
    private static final int kBackRightEncoderId = 5;
    private static final Angle kBackRightEncoderOffset = Rotations.of(-0.05712890625);
    private static final boolean kBackRightSteerMotorInverted = true;
    private static final boolean kBackRightEncoderInverted = false;

    private static final Distance kBackRightXPos = Inches.of(-11.875);
    private static final Distance kBackRightYPos = Inches.of(-11.875);


    public static final SwerveModuleConstants<TalonFXConfiguration, TalonFXConfiguration, CANcoderConfiguration> FrontLeft =
        ConstantCreator.createModuleConstants(
            kFrontLeftSteerMotorId, kFrontLeftDriveMotorId, kFrontLeftEncoderId, kFrontLeftEncoderOffset,
            kFrontLeftXPos, kFrontLeftYPos, kInvertLeftSide, kFrontLeftSteerMotorInverted, kFrontLeftEncoderInverted
        );
    public static final SwerveModuleConstants<TalonFXConfiguration, TalonFXConfiguration, CANcoderConfiguration> FrontRight =
        ConstantCreator.createModuleConstants(
            kFrontRightSteerMotorId, kFrontRightDriveMotorId, kFrontRightEncoderId, kFrontRightEncoderOffset,
            kFrontRightXPos, kFrontRightYPos, kInvertRightSide, kFrontRightSteerMotorInverted, kFrontRightEncoderInverted
        );
    public static final SwerveModuleConstants<TalonFXConfiguration, TalonFXConfiguration, CANcoderConfiguration> BackLeft =
        ConstantCreator.createModuleConstants(
            kBackLeftSteerMotorId, kBackLeftDriveMotorId, kBackLeftEncoderId, kBackLeftEncoderOffset,
            kBackLeftXPos, kBackLeftYPos, kInvertLeftSide, kBackLeftSteerMotorInverted, kBackLeftEncoderInverted
        );
    public static final SwerveModuleConstants<TalonFXConfiguration, TalonFXConfiguration, CANcoderConfiguration> BackRight =
        ConstantCreator.createModuleConstants(
            kBackRightSteerMotorId, kBackRightDriveMotorId, kBackRightEncoderId, kBackRightEncoderOffset,
            kBackRightXPos, kBackRightYPos, kInvertRightSide, kBackRightSteerMotorInverted, kBackRightEncoderInverted
        );

    /**
     * Creates a CommandSwerveDrivetrain instance.
     * This should only be called once in your robot program,.
     */
    public static CommandSwerveDrivetrain createDrivetrain() {
        
        CommandSwerveDrivetrain theDriveTrain = new 
         CommandSwerveDrivetrain(
            DrivetrainConstants, FrontLeft, FrontRight, BackLeft, BackRight
        );

        // Front Left
        theDriveTrain.getModule(0).getSteerMotor().getConfigurator().apply(Slot0Configs_FrontLeftSteer);
        theDriveTrain.getModule(0).getDriveMotor().getConfigurator().apply(Slot1Configs_FrontLeftTranslation);
        theDriveTrain.getModule(0).getDriveMotor().getConfigurator().apply(Slot2Configs_FrontLeftRotation);

        // Front Right
        theDriveTrain.getModule(1).getSteerMotor().getConfigurator().apply(Slot0Configs_FrontRightSteer);
        theDriveTrain.getModule(1).getDriveMotor().getConfigurator().apply(Slot1Configs_FrontRightTranslation);
        theDriveTrain.getModule(1).getDriveMotor().getConfigurator().apply(Slot2Configs_FrontRightRotation);

        // Back Left
        theDriveTrain.getModule(2).getSteerMotor().getConfigurator().apply(Slot0Configs_BackLeftSteer);
        theDriveTrain.getModule(2).getDriveMotor().getConfigurator().apply(Slot1Configs_BackLeftTranslation);
        theDriveTrain.getModule(2).getDriveMotor().getConfigurator().apply(Slot2Configs_BackLeftRotation);

        // Back Right
        theDriveTrain.getModule(3).getSteerMotor().getConfigurator().apply(Slot0Configs_BackRighttSteer);
        theDriveTrain.getModule(3).getDriveMotor().getConfigurator().apply(Slot1Configs_BackRighttTranslation);
        theDriveTrain.getModule(3).getDriveMotor().getConfigurator().apply(Slot2Configs_BackRighttRotation);

        // Select the Slot to be active
        theDriveTrain.getModule(0).getSteerMotor().getConfigurator().apply(Slot0Configs_BackLeftSteer);
        setDefaultSlotOnAllDrivetrainMotors(theDriveTrain, true);

        return theDriveTrain;
    }

    public static void setDefaultSlotOnAllDrivetrainMotors(CommandSwerveDrivetrain theCommandSwerveDrivetrain, boolean bTranslateNotRotate) {
        if (bTranslateNotRotate){
            theCommandSwerveDrivetrain.getModule(0).getDriveMotor().getConfigurator().apply(Slot1Configs_FrontLeftTranslation);  // think this is incorrect.  Shoud call motor.getControl().setDefaultClosedLoopSlot(1) but it don't exist for TalonFX class.
            theCommandSwerveDrivetrain.getModule(1).getDriveMotor().getConfigurator().apply(Slot1Configs_FrontRightTranslation);
            theCommandSwerveDrivetrain.getModule(2).getDriveMotor().getConfigurator().apply(Slot1Configs_BackLeftTranslation);
            theCommandSwerveDrivetrain.getModule(3).getDriveMotor().getConfigurator().apply(Slot1Configs_BackRighttTranslation);
        } else {
            theCommandSwerveDrivetrain.getModule(0).getDriveMotor().getConfigurator().apply(Slot2Configs_FrontLeftRotation);
            theCommandSwerveDrivetrain.getModule(1).getDriveMotor().getConfigurator().apply(Slot2Configs_FrontRightRotation);
            theCommandSwerveDrivetrain.getModule(2).getDriveMotor().getConfigurator().apply(Slot2Configs_BackLeftRotation);
            theCommandSwerveDrivetrain.getModule(3).getDriveMotor().getConfigurator().apply(Slot2Configs_BackRighttRotation);
        }
    }

    /**
     * Swerve Drive class utilizing CTR Electronics' Phoenix 6 API with the selected device types.
     */
    public static class TunerSwerveDrivetrain extends SwerveDrivetrain<TalonFX, TalonFX, CANcoder> {
        /**
         * Constructs a CTRE SwerveDrivetrain using the specified constants.
         * <p>
         * This constructs the underlying hardware devices, so users should not construct
         * the devices themselves. If they need the devices, they can access them through
         * getters in the classes.
         *
         * @param drivetrainConstants   Drivetrain-wide constants for the swerve drive
         * @param modules               Constants for each specific module
         */
        public TunerSwerveDrivetrain(
            SwerveDrivetrainConstants drivetrainConstants,
            SwerveModuleConstants<?, ?, ?>... modules
        ) {
            super(
                TalonFX::new, TalonFX::new, CANcoder::new,
                drivetrainConstants, modules
            );
        }

        /**
         * Constructs a CTRE SwerveDrivetrain using the specified constants.
         * <p>
         * This constructs the underlying hardware devices, so users should not construct
         * the devices themselves. If they need the devices, they can access them through
         * getters in the classes.
         *
         * @param drivetrainConstants     Drivetrain-wide constants for the swerve drive
         * @param odometryUpdateFrequency The frequency to run the odometry loop. If
         *                                unspecified or set to 0 Hz, this is 250 Hz on
         *                                CAN FD, and 100 Hz on CAN 2.0.
         * @param modules                 Constants for each specific module
         */
        public TunerSwerveDrivetrain(
            SwerveDrivetrainConstants drivetrainConstants,
            double odometryUpdateFrequency,
            SwerveModuleConstants<?, ?, ?>... modules
        ) {
            super(
                TalonFX::new, TalonFX::new, CANcoder::new,
                drivetrainConstants, odometryUpdateFrequency, modules
            );
        }

        /**
         * Constructs a CTRE SwerveDrivetrain using the specified constants.
         * <p>
         * This constructs the underlying hardware devices, so users should not construct
         * the devices themselves. If they need the devices, they can access them through
         * getters in the classes.
         *
         * @param drivetrainConstants       Drivetrain-wide constants for the swerve drive
         * @param odometryUpdateFrequency   The frequency to run the odometry loop. If
         *                                  unspecified or set to 0 Hz, this is 250 Hz on
         *                                  CAN FD, and 100 Hz on CAN 2.0.
         * @param odometryStandardDeviation The standard deviation for odometry calculation
         *                                  in the form [x, y, theta]ᵀ, with units in meters
         *                                  and radians
         * @param visionStandardDeviation   The standard deviation for vision calculation
         *                                  in the form [x, y, theta]ᵀ, with units in meters
         *                                  and radians
         * @param modules                   Constants for each specific module
         */
        public TunerSwerveDrivetrain(
            SwerveDrivetrainConstants drivetrainConstants,
            double odometryUpdateFrequency,
            Matrix<N3, N1> odometryStandardDeviation,
            Matrix<N3, N1> visionStandardDeviation,
            SwerveModuleConstants<?, ?, ?>... modules
        ) {
            super(
                TalonFX::new, TalonFX::new, CANcoder::new,
                drivetrainConstants, odometryUpdateFrequency,
                odometryStandardDeviation, visionStandardDeviation, modules
            );
        }
    }
}
